@model List<UTM.Keto.Web.Models.DailySalesViewModel>
@{
    ViewBag.Title = "Отчет по продажам";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid my-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-gradient-primary text-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0 fw-bold"><i class="fas fa-chart-line me-2"></i>Отчет по продажам</h3>
                        <div>
                            <a href="@Url.Action("Index", "Admin")" class="btn btn-light btn-sm">
                                <i class="fas fa-arrow-left me-1"></i> Назад к панели управления
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Фильтры и статистика -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <form action="@Url.Action("SalesReport", "Admin")" method="get" class="mb-4">
                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="startDate" class="form-label">Дата начала</label>
                                <input type="date" class="form-control" id="startDate" name="startDate" value="@ViewBag.StartDate">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="endDate" class="form-label">Дата окончания</label>
                                <input type="date" class="form-control" id="endDate" name="endDate" value="@ViewBag.EndDate">
                            </div>
                            <div class="col-md-4 d-flex align-items-end mb-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-filter me-1"></i> Применить фильтр
                                </button>
                                <a href="@Url.Action("SalesReport", "Admin")" class="btn btn-outline-secondary ms-2">
                                    <i class="fas fa-redo me-1"></i> Сбросить
                                </a>
                                <button type="button" class="btn btn-success ms-2" onclick="exportTableToExcel('salesTable', 'sales_report')">
                                    <i class="fas fa-file-excel me-1"></i> Excel
                                </button>
                            </div>
                        </div>
                    </form>

                    <div class="report-summary">
                        <div class="summary-item">
                            <div class="label">Период</div>
                            <div class="value">@DateTime.Parse(ViewBag.StartDate).ToString("dd.MM.yyyy") - @DateTime.Parse(ViewBag.EndDate).ToString("dd.MM.yyyy")</div>
                        </div>
                        <div class="summary-item">
                            <div class="label">Всего продаж</div>
                            <div class="value text-primary">@ViewBag.TotalRevenue.ToString("C")</div>
                        </div>
                        <div class="summary-item">
                            <div class="label">Всего заказов</div>
                            <div class="value text-success">@ViewBag.TotalOrders</div>
                        </div>
                        <div class="summary-item">
                            <div class="label">Средний чек</div>
                            <div class="value text-info">
                                @(ViewBag.TotalOrders > 0 ? (ViewBag.TotalRevenue / ViewBag.TotalOrders).ToString("C") : "0,00 ₽")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- График и таблица -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Динамика продаж</h6>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Сводка по продажам</h6>
                </div>
                <div class="card-body">
                    @if (Model.Count > 0)
                    {
                        <div class="mb-4">
                            <h5 class="text-success mb-2">Лучший день</h5>
                            @{
                                var bestDay = Model.OrderByDescending(s => s.Revenue).First();
                            }
                            <div class="text-gray-800">
                                <strong>@bestDay.Date.ToString("dd.MM.yyyy")</strong>
                            </div>
                            <div class="mb-2">Выручка: <strong>@bestDay.Revenue.ToString("C")</strong></div>
                            <div>Заказов: <strong>@bestDay.OrderCount</strong></div>
                            <div class="mt-2">
                                <div class="progress">
                                    <div class="progress-bar bg-success" role="progressbar" 
                                         style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <h5 class="text-danger mb-2">Худший день</h5>
                            @{
                                var worstDay = Model.Where(s => s.OrderCount > 0).OrderBy(s => s.Revenue).FirstOrDefault() ?? Model.First();
                            }
                            <div class="text-gray-800">
                                <strong>@worstDay.Date.ToString("dd.MM.yyyy")</strong>
                            </div>
                            <div class="mb-2">Выручка: <strong>@worstDay.Revenue.ToString("C")</strong></div>
                            <div>Заказов: <strong>@worstDay.OrderCount</strong></div>
                            <div class="mt-2">
                                <div class="progress">
                                    <div class="progress-bar bg-danger" role="progressbar" 
                                         style="width: @(worstDay.Revenue > 0 && bestDay.Revenue > 0 ? (worstDay.Revenue / bestDay.Revenue * 100).ToString("0") : "0")%" 
                                         aria-valuenow="@(worstDay.Revenue > 0 && bestDay.Revenue > 0 ? (worstDay.Revenue / bestDay.Revenue * 100).ToString("0") : "0")" 
                                         aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        </div>

                        <div>
                            <h5 class="text-primary mb-2">Средние показатели</h5>
                            <div class="mb-2">Средняя выручка в день: <strong>@((Model.Sum(s => s.Revenue) / Model.Count).ToString("C"))</strong></div>
                            <div>Среднее кол-во заказов в день: <strong>@((decimal)Model.Sum(s => s.OrderCount) / Model.Count).ToString("0.0")</strong></div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            За выбранный период данные отсутствуют.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Таблица с данными -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Детализация по дням</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="salesTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Дата</th>
                                    <th class="text-center">Кол-во заказов</th>
                                    <th class="text-end">Выручка</th>
                                    <th class="text-end">Средний чек</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Count > 0)
                                {
                                    foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>@item.Date.ToString("dd.MM.yyyy")</td>
                                            <td class="text-center">@item.OrderCount</td>
                                            <td class="text-end">@item.Revenue.ToString("C")</td>
                                            <td class="text-end">@(item.OrderCount > 0 ? (item.Revenue / item.OrderCount).ToString("C") : "0,00 ₽")</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center">Нет данных за выбранный период</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-light fw-bold">
                                <tr>
                                    <td>Итого:</td>
                                    <td class="text-center">@Model.Sum(x => x.OrderCount)</td>
                                    <td class="text-end">@Model.Sum(x => x.Revenue).ToString("C")</td>
                                    <td class="text-end">
                                        @(Model.Sum(x => x.OrderCount) > 0 
                                            ? (Model.Sum(x => x.Revenue) / Model.Sum(x => x.OrderCount)).ToString("C") 
                                            : "0,00 ₽")
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script>
        // Данные для графика
        const salesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        
        // Инициализация графика продаж
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(salesCtx, {
            type: 'line',
            data: {
                labels: salesData.map(item => new Date(item.Date).toLocaleDateString('ru-RU')),
                datasets: [
                    {
                        label: 'Выручка (₽)',
                        backgroundColor: 'rgba(78, 115, 223, 0.05)',
                        borderColor: 'rgba(78, 115, 223, 1)',
                        pointRadius: 3,
                        pointBackgroundColor: 'rgba(78, 115, 223, 1)',
                        pointBorderColor: 'rgba(78, 115, 223, 1)',
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: 'rgba(78, 115, 223, 1)',
                        pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: salesData.map(item => item.Revenue),
                        yAxisID: 'y'
                    },
                    {
                        label: 'Кол-во заказов',
                        backgroundColor: 'rgba(28, 200, 138, 0.05)',
                        borderColor: 'rgba(28, 200, 138, 1)',
                        pointRadius: 3,
                        pointBackgroundColor: 'rgba(28, 200, 138, 1)',
                        pointBorderColor: 'rgba(28, 200, 138, 1)',
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: 'rgba(28, 200, 138, 1)',
                        pointHoverBorderColor: 'rgba(28, 200, 138, 1)',
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: salesData.map(item => item.OrderCount),
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        }
                    },
                    y: {
                        type: 'linear',
                        position: 'left',
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            callback: function(value) {
                                return value.toLocaleString('ru-RU') + ' ₽';
                            }
                        },
                        grid: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    },
                    y1: {
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyColor: "#858796",
                        titleMarginBottom: 10,
                        titleColor: '#6e707e',
                        titleFontSize: 14,
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        intersect: false,
                        mode: 'index',
                        caretPadding: 10,
                        callbacks: {
                            label: function(context) {
                                const label = context.dataset.label || '';
                                const value = context.parsed.y;
                                if (label === 'Выручка (₽)') {
                                    return label + ': ' + value.toLocaleString('ru-RU') + ' ₽';
                                } else {
                                    return label + ': ' + value;
                                }
                            }
                        }
                    }
                }
            }
        });
        
        // Функция экспорта таблицы в Excel
        function exportTableToExcel(tableID, filename = '') {
            const downloadLink = document.createElement("a");
            const dataType = 'application/vnd.ms-excel';
            const table = document.getElementById(tableID);
            const tableHTML = table.outerHTML.replace(/ /g, '%20');
            
            filename = filename ? filename + '.xls' : 'excel_data.xls';
            
            downloadLink.href = 'data:' + dataType + ', ' + tableHTML;
            downloadLink.download = filename;
            downloadLink.click();
        }
    </script>
} 